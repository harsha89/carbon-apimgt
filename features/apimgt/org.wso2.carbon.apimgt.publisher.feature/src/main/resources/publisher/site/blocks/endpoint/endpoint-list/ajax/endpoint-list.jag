<%
include("/jagg/jagg.jag");

(function () {
    var site = require("/site/conf/site.json");
    var ssoEnabled = site.ssoConfiguration.enabled;
    response.contentType = "application/json; charset=UTF-8";
    var mod, obj,  result, username,
            msg = require("/site/conf/ui-messages.jag"),
            action = request.getParameter("action"),
            user = jagg.getUser();

    var validation = {
        "action": { type: "safetext"},
        "applicationName": { type: "name"},
    };

    var validation_errors = jagg.validateInputs(validation);

    if(validation_errors != true){
        print({
            error:true,
            message: msg.error.invalidInputs(validation_errors)
        });
    } else if (action == "getEndpoints") {
        var endpointList = [];
        var result;
        if (!user) {
            if(!ssoEnabled){
                print({
                    error:true,
                    message:msg.error.loginRequired(action)
                });
            }
            return;
        }
        username = user.username;
        try {
            var apiProvider = org.wso2.carbon.apimgt.impl.APIManagerFactory.getInstance().getAPIProvider(username);
            var endpoints = apiProvider.getEndpoints();
            for(var i =0; i < endpoints.size(); i++) {
                var endpoint = endpoints.get(i);
                var endpointContents = {};
                endpointContents.name = endpoint.getName();
                endpointContents.description = endpoint.getDescription();
                endpointContents.epSecured = endpoint.isEndpointSecured();
                endpointContents.epAuthDigest = endpoint.getEndPointAuthDigest();
                endpointContents.epConfig = endpoint.getEndpointConfig();
                endpointContents.epUsername = endpoint.getEndpointUsername();
                endpointContents.epPassword = String(endpoint.getEndpointPassword());
                endpointContents.visibleRoles = endpoint.getVisibleRoles();
                endpointContents.creator = endpoint.getCreator();
                endpointContents.version = endpoint.getVersion();
                endpointList.push(endpoint);
            }

            obj = {
                error:false,
                endpoints: endpointList
            };
            print(obj);
        } catch(e) {
            obj = {
                error:result.error,
                message:msg.error.authError(action, username)
            };
            print(obj);
        }
    } else if (action == "getEndpointsWithPagination") {
        var endpointList = [];
        if (!user) {
            if(!ssoEnabled){
                print({
                    error:true,
                    message:msg.error.loginRequired(action)
                });
            }
            return;
        }
        var searchTerm = request.getParameter("search[value]");
        var start = request.getParameter("start");
        var offset = request.getParameter("length");
        var tenantDomain = String(jagg.getTenantDomain());
        username = user.username;
        try {
        var apiProvider = org.wso2.carbon.apimgt.impl.APIManagerFactory.getInstance().getAPIProvider(username);
        var result = apiProvider.getAllPaginatedEndpoints(tenantDomain, start, offset, searchTerm);
        var endpoints = result.endpoints;
        var totalLength = result.totalLength;
        var totalRecordsCount = 0;

        for(var i =0; i < endpoints.size(); i++) {
            var endpoint = endpoints.get(i);
            var endpointContents = {};
            endpointContents.name = endpoint.getName();
            endpointContents.description = endpoint.getDescription();
            endpointContents.epSecured = endpoint.isEndpointSecured();
            endpointContents.epAuthDigest = endpoint.getEndPointAuthDigest();
            endpointContents.epConfig = endpoint.getEndpointConfig();
            endpointContents.epUsername = endpoint.getEndpointUsername();
            endpointContents.epPassword = String(endpoint.getEndpointPassword());
            endpointContents.visibleRoles = endpoint.getVisibleRoles();
            endpointContents.creator = endpoint.getCreator();
            endpointContents.version = endpoint.getVersion();
            endpointList.push(endpoint);
        }

        if(endpoints.size() > 0){
            totalRecordsCount = endpoints.size();
        }

        obj = {
            error:false,
            endpoints:endpoints,
            draw:draw,
            iTotalRecords:totalRecordsCount,
            iTotalDisplayRecords:totalRecordsCount
        };

        print(obj);

        } catch(e) {
            obj = {
                error:result.error,
                message:msg.error.authError(action, username)
            };
            print(obj);
        }
    } else if(action == "getEndpointByName"){
        if (!user) {
            if(!ssoEnabled){
                print({
                    error:true,
                    message:msg.error.loginRequired(action)
                });
            }
            return;
        }

        username = user.username;
        var endpointName = request.getParameter("endpointName");
        try {
            var apiProvider = org.wso2.carbon.apimgt.impl.APIManagerFactory.getInstance().getAPIProvider(username);
            var endpoint = apiProvider.getEndpoint(endpointName);
            var endpointContents = {};
            endpointContents.name = endpoint.getName();
            endpointContents.description = endpoint.getDescription();
            endpointContents.epSecured = endpoint.isEndpointSecured();
            endpointContents.epAuthDigest = endpoint.getEndPointAuthDigest();
            endpointContents.epConfig = endpoint.getEndpointConfig();
            endpointContents.epUsername = endpoint.getEndpointUsername();
            endpointContents.epPassword = String(endpoint.getEndpointPassword());
            endpointContents.visibleRoles = endpoint.getVisibleRoles();
            endpointContents.creator = endpoint.getCreator();
            endpointContents.version = endpoint.getVersion();
            obj = {
                error:false,
                endpoint:endpointContents
            };
            print(obj);
        } catch (e) {
            obj = {
                error:result.error,
                message:msg.error.authError(action, username)
            };
            print(obj);
        }
    } else if(action == "deleteEndpoint"){
        if (!user) {
            if(!ssoEnabled){
                print({
                    error:true,
                    message:msg.error.loginRequired(action)
                });
            }
            return;
        }
        username = user.username;
        var endpointName = request.getParameter("endpointName");
        try {
            var apiProvider = org.wso2.carbon.apimgt.impl.APIManagerFactory.getInstance().getAPIProvider(username);
            apiProvider.deleteEndpoint(endpointName)
            obj = {
                error:false
            };
            print(obj);
        } catch (e) {
            obj = {
                error: true,
                message:msg.error.authError(action, username)
            };
            print(obj);
        }
    } else if(action == "isEndpointExist"){
        if (!user) {
            if(!ssoEnabled){
                print({
                    error:true,
                    message:msg.error.loginRequired(action)
                });
            }
            return;
        }
        username = user.username;
        var endpointName = request.getParameter("endpointName");
        try {
            var apiProvider = org.wso2.carbon.apimgt.impl.APIManagerFactory.getInstance().getAPIProvider(username);
            apiProvider.isEndpointExist(endpointName);
            obj = {
                error:false
            };
            print(obj);
        } catch (e) {
            obj = {
                error: true,
                message:msg.error.authError(action, username)
            };
            print(obj);
        }
    }
    else {
        print({
            error:true,
            message:msg.error.invalidAction(action)
        });
    }
}());
%>
